/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Mecanismo de Busca API
 * API para busca textual e vetorial usando Typesense e embeddings gerados via Google Gemini
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteApiV1AdminServicesId400,
  DeleteApiV1AdminServicesId401,
  DeleteApiV1AdminServicesId404,
  DeleteApiV1AdminServicesId500,
  GetApiV1AdminServices400,
  GetApiV1AdminServices500,
  GetApiV1AdminServicesId400,
  GetApiV1AdminServicesId404,
  GetApiV1AdminServicesId500,
  GetApiV1AdminServicesParams,
  ModelsPrefRioService,
  ModelsPrefRioServiceRequest,
  ModelsPrefRioServiceResponse,
  PatchApiV1AdminServicesIdPublish400,
  PatchApiV1AdminServicesIdPublish401,
  PatchApiV1AdminServicesIdPublish404,
  PatchApiV1AdminServicesIdPublish500,
  PatchApiV1AdminServicesIdUnpublish400,
  PatchApiV1AdminServicesIdUnpublish401,
  PatchApiV1AdminServicesIdUnpublish404,
  PatchApiV1AdminServicesIdUnpublish500,
  PostApiV1AdminServices400,
  PostApiV1AdminServices401,
  PostApiV1AdminServices500,
  PutApiV1AdminServicesId400,
  PutApiV1AdminServicesId401,
  PutApiV1AdminServicesId404,
  PutApiV1AdminServicesId500,
} from '.././models'

import { customFetchBuscaSearch } from '../../../custom-fetch-busca-search'

/**
 * Lista servi√ßos com pagina√ß√£o e filtros opcionais
 * @summary Lista servi√ßos com pagina√ß√£o e filtros
 */
export type getApiV1AdminServicesResponse200 = {
  data: ModelsPrefRioServiceResponse
  status: 200
}

export type getApiV1AdminServicesResponse400 = {
  data: GetApiV1AdminServices400
  status: 400
}

export type getApiV1AdminServicesResponse500 = {
  data: GetApiV1AdminServices500
  status: 500
}

export type getApiV1AdminServicesResponseComposite =
  | getApiV1AdminServicesResponse200
  | getApiV1AdminServicesResponse400
  | getApiV1AdminServicesResponse500

export type getApiV1AdminServicesResponse =
  getApiV1AdminServicesResponseComposite & {
    headers: Headers
  }

export const getGetApiV1AdminServicesUrl = (
  params?: GetApiV1AdminServicesParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/admin/services?${stringifiedParams}`
    : `/api/v1/admin/services`
}

export const getApiV1AdminServices = async (
  params?: GetApiV1AdminServicesParams,
  options?: RequestInit
): Promise<getApiV1AdminServicesResponse> => {
  return customFetchBuscaSearch<getApiV1AdminServicesResponse>(
    getGetApiV1AdminServicesUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria um novo servi√ßo na collection prefrio_services_base
 * @summary Cria um novo servi√ßo
 */
export type postApiV1AdminServicesResponse201 = {
  data: ModelsPrefRioService
  status: 201
}

export type postApiV1AdminServicesResponse400 = {
  data: PostApiV1AdminServices400
  status: 400
}

export type postApiV1AdminServicesResponse401 = {
  data: PostApiV1AdminServices401
  status: 401
}

export type postApiV1AdminServicesResponse500 = {
  data: PostApiV1AdminServices500
  status: 500
}

export type postApiV1AdminServicesResponseComposite =
  | postApiV1AdminServicesResponse201
  | postApiV1AdminServicesResponse400
  | postApiV1AdminServicesResponse401
  | postApiV1AdminServicesResponse500

export type postApiV1AdminServicesResponse =
  postApiV1AdminServicesResponseComposite & {
    headers: Headers
  }

export const getPostApiV1AdminServicesUrl = () => {
  return `/api/v1/admin/services`
}

export const postApiV1AdminServices = async (
  modelsPrefRioServiceRequest: ModelsPrefRioServiceRequest,
  options?: RequestInit
): Promise<postApiV1AdminServicesResponse> => {
  return customFetchBuscaSearch<postApiV1AdminServicesResponse>(
    getPostApiV1AdminServicesUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsPrefRioServiceRequest),
    }
  )
}

/**
 * Busca um servi√ßo espec√≠fico por ID
 * @summary Busca um servi√ßo por ID
 */
export type getApiV1AdminServicesIdResponse200 = {
  data: ModelsPrefRioService
  status: 200
}

export type getApiV1AdminServicesIdResponse400 = {
  data: GetApiV1AdminServicesId400
  status: 400
}

export type getApiV1AdminServicesIdResponse404 = {
  data: GetApiV1AdminServicesId404
  status: 404
}

export type getApiV1AdminServicesIdResponse500 = {
  data: GetApiV1AdminServicesId500
  status: 500
}

export type getApiV1AdminServicesIdResponseComposite =
  | getApiV1AdminServicesIdResponse200
  | getApiV1AdminServicesIdResponse400
  | getApiV1AdminServicesIdResponse404
  | getApiV1AdminServicesIdResponse500

export type getApiV1AdminServicesIdResponse =
  getApiV1AdminServicesIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1AdminServicesIdUrl = (id: string) => {
  return `/api/v1/admin/services/${id}`
}

export const getApiV1AdminServicesId = async (
  id: string,
  options?: RequestInit
): Promise<getApiV1AdminServicesIdResponse> => {
  return customFetchBuscaSearch<getApiV1AdminServicesIdResponse>(
    getGetApiV1AdminServicesIdUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza um servi√ßo existente
 * @summary Atualiza um servi√ßo existente
 */
export type putApiV1AdminServicesIdResponse200 = {
  data: ModelsPrefRioService
  status: 200
}

export type putApiV1AdminServicesIdResponse400 = {
  data: PutApiV1AdminServicesId400
  status: 400
}

export type putApiV1AdminServicesIdResponse401 = {
  data: PutApiV1AdminServicesId401
  status: 401
}

export type putApiV1AdminServicesIdResponse404 = {
  data: PutApiV1AdminServicesId404
  status: 404
}

export type putApiV1AdminServicesIdResponse500 = {
  data: PutApiV1AdminServicesId500
  status: 500
}

export type putApiV1AdminServicesIdResponseComposite =
  | putApiV1AdminServicesIdResponse200
  | putApiV1AdminServicesIdResponse400
  | putApiV1AdminServicesIdResponse401
  | putApiV1AdminServicesIdResponse404
  | putApiV1AdminServicesIdResponse500

export type putApiV1AdminServicesIdResponse =
  putApiV1AdminServicesIdResponseComposite & {
    headers: Headers
  }

export const getPutApiV1AdminServicesIdUrl = (id: string) => {
  return `/api/v1/admin/services/${id}`
}

export const putApiV1AdminServicesId = async (
  id: string,
  modelsPrefRioServiceRequest: ModelsPrefRioServiceRequest,
  options?: RequestInit
): Promise<putApiV1AdminServicesIdResponse> => {
  return customFetchBuscaSearch<putApiV1AdminServicesIdResponse>(
    getPutApiV1AdminServicesIdUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsPrefRioServiceRequest),
    }
  )
}

/**
 * Deleta um servi√ßo
 * @summary Deleta um servi√ßo
 */
export type deleteApiV1AdminServicesIdResponse204 = {
  data: null
  status: 204
}

export type deleteApiV1AdminServicesIdResponse400 = {
  data: DeleteApiV1AdminServicesId400
  status: 400
}

export type deleteApiV1AdminServicesIdResponse401 = {
  data: DeleteApiV1AdminServicesId401
  status: 401
}

export type deleteApiV1AdminServicesIdResponse404 = {
  data: DeleteApiV1AdminServicesId404
  status: 404
}

export type deleteApiV1AdminServicesIdResponse500 = {
  data: DeleteApiV1AdminServicesId500
  status: 500
}

export type deleteApiV1AdminServicesIdResponseComposite =
  | deleteApiV1AdminServicesIdResponse204
  | deleteApiV1AdminServicesIdResponse400
  | deleteApiV1AdminServicesIdResponse401
  | deleteApiV1AdminServicesIdResponse404
  | deleteApiV1AdminServicesIdResponse500

export type deleteApiV1AdminServicesIdResponse =
  deleteApiV1AdminServicesIdResponseComposite & {
    headers: Headers
  }

export const getDeleteApiV1AdminServicesIdUrl = (id: string) => {
  return `/api/v1/admin/services/${id}`
}

export const deleteApiV1AdminServicesId = async (
  id: string,
  options?: RequestInit
): Promise<deleteApiV1AdminServicesIdResponse> => {
  return customFetchBuscaSearch<deleteApiV1AdminServicesIdResponse>(
    getDeleteApiV1AdminServicesIdUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

/**
 * Publica um servi√ßo alterando seu status para 1
 * @summary Publica um servi√ßo (altera status para 1)
 */
export type patchApiV1AdminServicesIdPublishResponse200 = {
  data: ModelsPrefRioService
  status: 200
}

export type patchApiV1AdminServicesIdPublishResponse400 = {
  data: PatchApiV1AdminServicesIdPublish400
  status: 400
}

export type patchApiV1AdminServicesIdPublishResponse401 = {
  data: PatchApiV1AdminServicesIdPublish401
  status: 401
}

export type patchApiV1AdminServicesIdPublishResponse404 = {
  data: PatchApiV1AdminServicesIdPublish404
  status: 404
}

export type patchApiV1AdminServicesIdPublishResponse500 = {
  data: PatchApiV1AdminServicesIdPublish500
  status: 500
}

export type patchApiV1AdminServicesIdPublishResponseComposite =
  | patchApiV1AdminServicesIdPublishResponse200
  | patchApiV1AdminServicesIdPublishResponse400
  | patchApiV1AdminServicesIdPublishResponse401
  | patchApiV1AdminServicesIdPublishResponse404
  | patchApiV1AdminServicesIdPublishResponse500

export type patchApiV1AdminServicesIdPublishResponse =
  patchApiV1AdminServicesIdPublishResponseComposite & {
    headers: Headers
  }

export const getPatchApiV1AdminServicesIdPublishUrl = (id: string) => {
  return `/api/v1/admin/services/${id}/publish`
}

export const patchApiV1AdminServicesIdPublish = async (
  id: string,
  options?: RequestInit
): Promise<patchApiV1AdminServicesIdPublishResponse> => {
  return customFetchBuscaSearch<patchApiV1AdminServicesIdPublishResponse>(
    getPatchApiV1AdminServicesIdPublishUrl(id),
    {
      ...options,
      method: 'PATCH',
    }
  )
}

/**
 * Despublica um servi√ßo alterando seu status para 0
 * @summary Despublica um servi√ßo (altera status para 0)
 */
export type patchApiV1AdminServicesIdUnpublishResponse200 = {
  data: ModelsPrefRioService
  status: 200
}

export type patchApiV1AdminServicesIdUnpublishResponse400 = {
  data: PatchApiV1AdminServicesIdUnpublish400
  status: 400
}

export type patchApiV1AdminServicesIdUnpublishResponse401 = {
  data: PatchApiV1AdminServicesIdUnpublish401
  status: 401
}

export type patchApiV1AdminServicesIdUnpublishResponse404 = {
  data: PatchApiV1AdminServicesIdUnpublish404
  status: 404
}

export type patchApiV1AdminServicesIdUnpublishResponse500 = {
  data: PatchApiV1AdminServicesIdUnpublish500
  status: 500
}

export type patchApiV1AdminServicesIdUnpublishResponseComposite =
  | patchApiV1AdminServicesIdUnpublishResponse200
  | patchApiV1AdminServicesIdUnpublishResponse400
  | patchApiV1AdminServicesIdUnpublishResponse401
  | patchApiV1AdminServicesIdUnpublishResponse404
  | patchApiV1AdminServicesIdUnpublishResponse500

export type patchApiV1AdminServicesIdUnpublishResponse =
  patchApiV1AdminServicesIdUnpublishResponseComposite & {
    headers: Headers
  }

export const getPatchApiV1AdminServicesIdUnpublishUrl = (id: string) => {
  return `/api/v1/admin/services/${id}/unpublish`
}

export const patchApiV1AdminServicesIdUnpublish = async (
  id: string,
  options?: RequestInit
): Promise<patchApiV1AdminServicesIdUnpublishResponse> => {
  return customFetchBuscaSearch<patchApiV1AdminServicesIdUnpublishResponse>(
    getPatchApiV1AdminServicesIdUnpublishUrl(id),
    {
      ...options,
      method: 'PATCH',
    }
  )
}
