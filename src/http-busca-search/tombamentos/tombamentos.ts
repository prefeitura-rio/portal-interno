/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Mecanismo de Busca API
 * API para busca textual e vetorial usando Typesense e embeddings gerados via Google Gemini
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteApiV1AdminTombamentosId400,
  DeleteApiV1AdminTombamentosId401,
  DeleteApiV1AdminTombamentosId404,
  DeleteApiV1AdminTombamentosId500,
  GetApiV1AdminTombamentos400,
  GetApiV1AdminTombamentos500,
  GetApiV1AdminTombamentosByOldService400,
  GetApiV1AdminTombamentosByOldService404,
  GetApiV1AdminTombamentosByOldService500,
  GetApiV1AdminTombamentosByOldServiceParams,
  GetApiV1AdminTombamentosId400,
  GetApiV1AdminTombamentosId404,
  GetApiV1AdminTombamentosId500,
  GetApiV1AdminTombamentosParams,
  ModelsTombamento,
  ModelsTombamentoRequest,
  ModelsTombamentoResponse,
  PostApiV1AdminTombamentos400,
  PostApiV1AdminTombamentos401,
  PostApiV1AdminTombamentos404,
  PostApiV1AdminTombamentos409,
  PostApiV1AdminTombamentos500,
  PutApiV1AdminTombamentosId400,
  PutApiV1AdminTombamentosId401,
  PutApiV1AdminTombamentosId404,
  PutApiV1AdminTombamentosId500,
} from '.././models'

import { customFetchBuscaSearch } from '../../../custom-fetch-busca-search'

/**
 * Lista tombamentos com pagina√ß√£o e filtros opcionais
 * @summary Lista tombamentos com pagina√ß√£o e filtros
 */
export type getApiV1AdminTombamentosResponse200 = {
  data: ModelsTombamentoResponse
  status: 200
}

export type getApiV1AdminTombamentosResponse400 = {
  data: GetApiV1AdminTombamentos400
  status: 400
}

export type getApiV1AdminTombamentosResponse500 = {
  data: GetApiV1AdminTombamentos500
  status: 500
}

export type getApiV1AdminTombamentosResponseComposite =
  | getApiV1AdminTombamentosResponse200
  | getApiV1AdminTombamentosResponse400
  | getApiV1AdminTombamentosResponse500

export type getApiV1AdminTombamentosResponse =
  getApiV1AdminTombamentosResponseComposite & {
    headers: Headers
  }

export const getGetApiV1AdminTombamentosUrl = (
  params?: GetApiV1AdminTombamentosParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/admin/tombamentos?${stringifiedParams}`
    : `/api/v1/admin/tombamentos`
}

export const getApiV1AdminTombamentos = async (
  params?: GetApiV1AdminTombamentosParams,
  options?: RequestInit
): Promise<getApiV1AdminTombamentosResponse> => {
  return customFetchBuscaSearch<getApiV1AdminTombamentosResponse>(
    getGetApiV1AdminTombamentosUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria um mapeamento de servi√ßo antigo para servi√ßo novo na collection tombamentos_overlay
 * @summary Cria um novo tombamento
 */
export type postApiV1AdminTombamentosResponse201 = {
  data: ModelsTombamento
  status: 201
}

export type postApiV1AdminTombamentosResponse400 = {
  data: PostApiV1AdminTombamentos400
  status: 400
}

export type postApiV1AdminTombamentosResponse401 = {
  data: PostApiV1AdminTombamentos401
  status: 401
}

export type postApiV1AdminTombamentosResponse404 = {
  data: PostApiV1AdminTombamentos404
  status: 404
}

export type postApiV1AdminTombamentosResponse409 = {
  data: PostApiV1AdminTombamentos409
  status: 409
}

export type postApiV1AdminTombamentosResponse500 = {
  data: PostApiV1AdminTombamentos500
  status: 500
}

export type postApiV1AdminTombamentosResponseComposite =
  | postApiV1AdminTombamentosResponse201
  | postApiV1AdminTombamentosResponse400
  | postApiV1AdminTombamentosResponse401
  | postApiV1AdminTombamentosResponse404
  | postApiV1AdminTombamentosResponse409
  | postApiV1AdminTombamentosResponse500

export type postApiV1AdminTombamentosResponse =
  postApiV1AdminTombamentosResponseComposite & {
    headers: Headers
  }

export const getPostApiV1AdminTombamentosUrl = () => {
  return `/api/v1/admin/tombamentos`
}

export const postApiV1AdminTombamentos = async (
  modelsTombamentoRequest: ModelsTombamentoRequest,
  options?: RequestInit
): Promise<postApiV1AdminTombamentosResponse> => {
  return customFetchBuscaSearch<postApiV1AdminTombamentosResponse>(
    getPostApiV1AdminTombamentosUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsTombamentoRequest),
    }
  )
}

/**
 * Busca um tombamento pelo ID do servi√ßo antigo e origem
 * @summary Busca tombamento por servi√ßo antigo
 */
export type getApiV1AdminTombamentosByOldServiceResponse200 = {
  data: ModelsTombamento
  status: 200
}

export type getApiV1AdminTombamentosByOldServiceResponse400 = {
  data: GetApiV1AdminTombamentosByOldService400
  status: 400
}

export type getApiV1AdminTombamentosByOldServiceResponse404 = {
  data: GetApiV1AdminTombamentosByOldService404
  status: 404
}

export type getApiV1AdminTombamentosByOldServiceResponse500 = {
  data: GetApiV1AdminTombamentosByOldService500
  status: 500
}

export type getApiV1AdminTombamentosByOldServiceResponseComposite =
  | getApiV1AdminTombamentosByOldServiceResponse200
  | getApiV1AdminTombamentosByOldServiceResponse400
  | getApiV1AdminTombamentosByOldServiceResponse404
  | getApiV1AdminTombamentosByOldServiceResponse500

export type getApiV1AdminTombamentosByOldServiceResponse =
  getApiV1AdminTombamentosByOldServiceResponseComposite & {
    headers: Headers
  }

export const getGetApiV1AdminTombamentosByOldServiceUrl = (
  params: GetApiV1AdminTombamentosByOldServiceParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/admin/tombamentos/by-old-service?${stringifiedParams}`
    : `/api/v1/admin/tombamentos/by-old-service`
}

export const getApiV1AdminTombamentosByOldService = async (
  params: GetApiV1AdminTombamentosByOldServiceParams,
  options?: RequestInit
): Promise<getApiV1AdminTombamentosByOldServiceResponse> => {
  return customFetchBuscaSearch<getApiV1AdminTombamentosByOldServiceResponse>(
    getGetApiV1AdminTombamentosByOldServiceUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Busca um tombamento espec√≠fico por ID
 * @summary Busca um tombamento por ID
 */
export type getApiV1AdminTombamentosIdResponse200 = {
  data: ModelsTombamento
  status: 200
}

export type getApiV1AdminTombamentosIdResponse400 = {
  data: GetApiV1AdminTombamentosId400
  status: 400
}

export type getApiV1AdminTombamentosIdResponse404 = {
  data: GetApiV1AdminTombamentosId404
  status: 404
}

export type getApiV1AdminTombamentosIdResponse500 = {
  data: GetApiV1AdminTombamentosId500
  status: 500
}

export type getApiV1AdminTombamentosIdResponseComposite =
  | getApiV1AdminTombamentosIdResponse200
  | getApiV1AdminTombamentosIdResponse400
  | getApiV1AdminTombamentosIdResponse404
  | getApiV1AdminTombamentosIdResponse500

export type getApiV1AdminTombamentosIdResponse =
  getApiV1AdminTombamentosIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1AdminTombamentosIdUrl = (id: string) => {
  return `/api/v1/admin/tombamentos/${id}`
}

export const getApiV1AdminTombamentosId = async (
  id: string,
  options?: RequestInit
): Promise<getApiV1AdminTombamentosIdResponse> => {
  return customFetchBuscaSearch<getApiV1AdminTombamentosIdResponse>(
    getGetApiV1AdminTombamentosIdUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza um tombamento existente
 * @summary Atualiza um tombamento existente
 */
export type putApiV1AdminTombamentosIdResponse200 = {
  data: ModelsTombamento
  status: 200
}

export type putApiV1AdminTombamentosIdResponse400 = {
  data: PutApiV1AdminTombamentosId400
  status: 400
}

export type putApiV1AdminTombamentosIdResponse401 = {
  data: PutApiV1AdminTombamentosId401
  status: 401
}

export type putApiV1AdminTombamentosIdResponse404 = {
  data: PutApiV1AdminTombamentosId404
  status: 404
}

export type putApiV1AdminTombamentosIdResponse500 = {
  data: PutApiV1AdminTombamentosId500
  status: 500
}

export type putApiV1AdminTombamentosIdResponseComposite =
  | putApiV1AdminTombamentosIdResponse200
  | putApiV1AdminTombamentosIdResponse400
  | putApiV1AdminTombamentosIdResponse401
  | putApiV1AdminTombamentosIdResponse404
  | putApiV1AdminTombamentosIdResponse500

export type putApiV1AdminTombamentosIdResponse =
  putApiV1AdminTombamentosIdResponseComposite & {
    headers: Headers
  }

export const getPutApiV1AdminTombamentosIdUrl = (id: string) => {
  return `/api/v1/admin/tombamentos/${id}`
}

export const putApiV1AdminTombamentosId = async (
  id: string,
  modelsTombamentoRequest: ModelsTombamentoRequest,
  options?: RequestInit
): Promise<putApiV1AdminTombamentosIdResponse> => {
  return customFetchBuscaSearch<putApiV1AdminTombamentosIdResponse>(
    getPutApiV1AdminTombamentosIdUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsTombamentoRequest),
    }
  )
}

/**
 * Deleta um tombamento, fazendo com que o servi√ßo antigo volte a aparecer normalmente
 * @summary Deleta um tombamento (reverte substitui√ß√£o)
 */
export type deleteApiV1AdminTombamentosIdResponse204 = {
  data: null
  status: 204
}

export type deleteApiV1AdminTombamentosIdResponse400 = {
  data: DeleteApiV1AdminTombamentosId400
  status: 400
}

export type deleteApiV1AdminTombamentosIdResponse401 = {
  data: DeleteApiV1AdminTombamentosId401
  status: 401
}

export type deleteApiV1AdminTombamentosIdResponse404 = {
  data: DeleteApiV1AdminTombamentosId404
  status: 404
}

export type deleteApiV1AdminTombamentosIdResponse500 = {
  data: DeleteApiV1AdminTombamentosId500
  status: 500
}

export type deleteApiV1AdminTombamentosIdResponseComposite =
  | deleteApiV1AdminTombamentosIdResponse204
  | deleteApiV1AdminTombamentosIdResponse400
  | deleteApiV1AdminTombamentosIdResponse401
  | deleteApiV1AdminTombamentosIdResponse404
  | deleteApiV1AdminTombamentosIdResponse500

export type deleteApiV1AdminTombamentosIdResponse =
  deleteApiV1AdminTombamentosIdResponseComposite & {
    headers: Headers
  }

export const getDeleteApiV1AdminTombamentosIdUrl = (id: string) => {
  return `/api/v1/admin/tombamentos/${id}`
}

export const deleteApiV1AdminTombamentosId = async (
  id: string,
  options?: RequestInit
): Promise<deleteApiV1AdminTombamentosIdResponse> => {
  return customFetchBuscaSearch<deleteApiV1AdminTombamentosIdResponse>(
    getDeleteApiV1AdminTombamentosIdUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}
