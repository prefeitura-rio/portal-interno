/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Mecanismo de Busca API
 * API para busca textual e vetorial usando Typesense e embeddings gerados via Google Gemini
 * OpenAPI spec version: 1.0
 */
import type {
  GetApiV1BuscaHibridaMulti200,
  GetApiV1BuscaHibridaMulti400,
  GetApiV1BuscaHibridaMulti500,
  GetApiV1BuscaHibridaMultiParams,
  GetApiV1CategoriaCollections200,
  GetApiV1CategoriaCollections400,
  GetApiV1CategoriaCollections500,
  GetApiV1CategoriaCollectionsParams,
  GetApiV1CategoriasRelevancia200,
  GetApiV1CategoriasRelevancia400,
  GetApiV1CategoriasRelevancia500,
  GetApiV1CategoriasRelevanciaParams,
  GetApiV1DocumentoCollectionId200,
  GetApiV1DocumentoCollectionId400,
  GetApiV1DocumentoCollectionId404,
  GetApiV1DocumentoCollectionId500,
} from '.././models'

import { customFetchBuscaSearch } from '../../../custom-fetch-busca-search'

/**
 * Realiza uma busca hibrida em varias colecoes combinando texto e embeddings
 * @summary Busca hibrida em varias colecoes
 */
export type getApiV1BuscaHibridaMultiResponse200 = {
  data: GetApiV1BuscaHibridaMulti200
  status: 200
}

export type getApiV1BuscaHibridaMultiResponse400 = {
  data: GetApiV1BuscaHibridaMulti400
  status: 400
}

export type getApiV1BuscaHibridaMultiResponse500 = {
  data: GetApiV1BuscaHibridaMulti500
  status: 500
}

export type getApiV1BuscaHibridaMultiResponseComposite =
  | getApiV1BuscaHibridaMultiResponse200
  | getApiV1BuscaHibridaMultiResponse400
  | getApiV1BuscaHibridaMultiResponse500

export type getApiV1BuscaHibridaMultiResponse =
  getApiV1BuscaHibridaMultiResponseComposite & {
    headers: Headers
  }

export const getGetApiV1BuscaHibridaMultiUrl = (
  params: GetApiV1BuscaHibridaMultiParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/busca-hibrida-multi?${stringifiedParams}`
    : `/api/v1/busca-hibrida-multi`
}

export const getApiV1BuscaHibridaMulti = async (
  params: GetApiV1BuscaHibridaMultiParams,
  options?: RequestInit
): Promise<getApiV1BuscaHibridaMultiResponse> => {
  return customFetchBuscaSearch<getApiV1BuscaHibridaMultiResponse>(
    getGetApiV1BuscaHibridaMultiUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Busca documentos de uma categoria especifica em uma ou multiplas colecoes retornando informacoes completas
 * @summary Busca documentos por categoria
 */
export type getApiV1CategoriaCollectionsResponse200 = {
  data: GetApiV1CategoriaCollections200
  status: 200
}

export type getApiV1CategoriaCollectionsResponse400 = {
  data: GetApiV1CategoriaCollections400
  status: 400
}

export type getApiV1CategoriaCollectionsResponse500 = {
  data: GetApiV1CategoriaCollections500
  status: 500
}

export type getApiV1CategoriaCollectionsResponseComposite =
  | getApiV1CategoriaCollectionsResponse200
  | getApiV1CategoriaCollectionsResponse400
  | getApiV1CategoriaCollectionsResponse500

export type getApiV1CategoriaCollectionsResponse =
  getApiV1CategoriaCollectionsResponseComposite & {
    headers: Headers
  }

export const getGetApiV1CategoriaCollectionsUrl = (
  collections: string,
  params: GetApiV1CategoriaCollectionsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/categoria/${collections}?${stringifiedParams}`
    : `/api/v1/categoria/${collections}`
}

export const getApiV1CategoriaCollections = async (
  collections: string,
  params: GetApiV1CategoriaCollectionsParams,
  options?: RequestInit
): Promise<getApiV1CategoriaCollectionsResponse> => {
  return customFetchBuscaSearch<getApiV1CategoriaCollectionsResponse>(
    getGetApiV1CategoriaCollectionsUrl(collections, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Retorna todas as categorias ordenadas por relevancia baseada na volumetria dos servicos
 * @summary Busca categorias ordenadas por relevancia
 */
export type getApiV1CategoriasRelevanciaResponse200 = {
  data: GetApiV1CategoriasRelevancia200
  status: 200
}

export type getApiV1CategoriasRelevanciaResponse400 = {
  data: GetApiV1CategoriasRelevancia400
  status: 400
}

export type getApiV1CategoriasRelevanciaResponse500 = {
  data: GetApiV1CategoriasRelevancia500
  status: 500
}

export type getApiV1CategoriasRelevanciaResponseComposite =
  | getApiV1CategoriasRelevanciaResponse200
  | getApiV1CategoriasRelevanciaResponse400
  | getApiV1CategoriasRelevanciaResponse500

export type getApiV1CategoriasRelevanciaResponse =
  getApiV1CategoriasRelevanciaResponseComposite & {
    headers: Headers
  }

export const getGetApiV1CategoriasRelevanciaUrl = (
  params: GetApiV1CategoriasRelevanciaParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/categorias-relevancia?${stringifiedParams}`
    : `/api/v1/categorias-relevancia`
}

export const getApiV1CategoriasRelevancia = async (
  params: GetApiV1CategoriasRelevanciaParams,
  options?: RequestInit
): Promise<getApiV1CategoriasRelevanciaResponse> => {
  return customFetchBuscaSearch<getApiV1CategoriasRelevanciaResponse>(
    getGetApiV1CategoriasRelevanciaUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Busca um documento especifico por ID retornando todos os campos exceto embedding e campos normalizados
 * @summary Busca documento por ID
 */
export type getApiV1DocumentoCollectionIdResponse200 = {
  data: GetApiV1DocumentoCollectionId200
  status: 200
}

export type getApiV1DocumentoCollectionIdResponse400 = {
  data: GetApiV1DocumentoCollectionId400
  status: 400
}

export type getApiV1DocumentoCollectionIdResponse404 = {
  data: GetApiV1DocumentoCollectionId404
  status: 404
}

export type getApiV1DocumentoCollectionIdResponse500 = {
  data: GetApiV1DocumentoCollectionId500
  status: 500
}

export type getApiV1DocumentoCollectionIdResponseComposite =
  | getApiV1DocumentoCollectionIdResponse200
  | getApiV1DocumentoCollectionIdResponse400
  | getApiV1DocumentoCollectionIdResponse404
  | getApiV1DocumentoCollectionIdResponse500

export type getApiV1DocumentoCollectionIdResponse =
  getApiV1DocumentoCollectionIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1DocumentoCollectionIdUrl = (
  collection: string,
  id: string
) => {
  return `/api/v1/documento/${collection}/${id}`
}

export const getApiV1DocumentoCollectionId = async (
  collection: string,
  id: string,
  options?: RequestInit
): Promise<getApiV1DocumentoCollectionIdResponse> => {
  return customFetchBuscaSearch<getApiV1DocumentoCollectionIdResponse>(
    getGetApiV1DocumentoCollectionIdUrl(collection, id),
    {
      ...options,
      method: 'GET',
    }
  )
}
