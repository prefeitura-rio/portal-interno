/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteApiV1OportunidadesMeiId200,
  GetApiV1OportunidadesMei200,
  GetApiV1OportunidadesMeiDrafts200,
  GetApiV1OportunidadesMeiDraftsParams,
  GetApiV1OportunidadesMeiParams,
  ModelsErrorResponse,
  ModelsOportunidadeMEI,
  ModelsOportunidadeMEIBody,
} from '.././models'

import { customFetchGoRio } from '../../../custom-fetch-gorio'

/**
 * Retorna uma lista paginada de oportunidades MEI ativas
 * @summary Listar oportunidades MEI
 */
export type getApiV1OportunidadesMeiResponse200 = {
  data: GetApiV1OportunidadesMei200
  status: 200
}

export type getApiV1OportunidadesMeiResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1OportunidadesMeiResponseComposite =
  | getApiV1OportunidadesMeiResponse200
  | getApiV1OportunidadesMeiResponse500

export type getApiV1OportunidadesMeiResponse =
  getApiV1OportunidadesMeiResponseComposite & {
    headers: Headers
  }

export const getGetApiV1OportunidadesMeiUrl = (
  params?: GetApiV1OportunidadesMeiParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/oportunidades-mei?${stringifiedParams}`
    : `/api/v1/oportunidades-mei`
}

export const getApiV1OportunidadesMei = async (
  params?: GetApiV1OportunidadesMeiParams,
  options?: RequestInit
): Promise<getApiV1OportunidadesMeiResponse> => {
  return customFetchGoRio<getApiV1OportunidadesMeiResponse>(
    getGetApiV1OportunidadesMeiUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria uma nova oportunidade MEI publicada
 * @summary Criar oportunidade MEI
 */
export type postApiV1OportunidadesMeiResponse201 = {
  data: ModelsOportunidadeMEI
  status: 201
}

export type postApiV1OportunidadesMeiResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1OportunidadesMeiResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1OportunidadesMeiResponseComposite =
  | postApiV1OportunidadesMeiResponse201
  | postApiV1OportunidadesMeiResponse400
  | postApiV1OportunidadesMeiResponse500

export type postApiV1OportunidadesMeiResponse =
  postApiV1OportunidadesMeiResponseComposite & {
    headers: Headers
  }

export const getPostApiV1OportunidadesMeiUrl = () => {
  return `/api/v1/oportunidades-mei`
}

export const postApiV1OportunidadesMei = async (
  modelsOportunidadeMEIBody: ModelsOportunidadeMEIBody,
  options?: RequestInit
): Promise<postApiV1OportunidadesMeiResponse> => {
  return customFetchGoRio<postApiV1OportunidadesMeiResponse>(
    getPostApiV1OportunidadesMeiUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsOportunidadeMEIBody),
    }
  )
}

/**
 * Cria uma nova oportunidade MEI em status de rascunho
 * @summary Criar oportunidade MEI como rascunho
 */
export type postApiV1OportunidadesMeiDraftResponse201 = {
  data: ModelsOportunidadeMEI
  status: 201
}

export type postApiV1OportunidadesMeiDraftResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1OportunidadesMeiDraftResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1OportunidadesMeiDraftResponseComposite =
  | postApiV1OportunidadesMeiDraftResponse201
  | postApiV1OportunidadesMeiDraftResponse400
  | postApiV1OportunidadesMeiDraftResponse500

export type postApiV1OportunidadesMeiDraftResponse =
  postApiV1OportunidadesMeiDraftResponseComposite & {
    headers: Headers
  }

export const getPostApiV1OportunidadesMeiDraftUrl = () => {
  return `/api/v1/oportunidades-mei/draft`
}

export const postApiV1OportunidadesMeiDraft = async (
  modelsOportunidadeMEIBody: ModelsOportunidadeMEIBody,
  options?: RequestInit
): Promise<postApiV1OportunidadesMeiDraftResponse> => {
  return customFetchGoRio<postApiV1OportunidadesMeiDraftResponse>(
    getPostApiV1OportunidadesMeiDraftUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsOportunidadeMEIBody),
    }
  )
}

/**
 * Retorna uma lista paginada de oportunidades MEI em rascunho
 * @summary Listar rascunhos de oportunidades MEI
 */
export type getApiV1OportunidadesMeiDraftsResponse200 = {
  data: GetApiV1OportunidadesMeiDrafts200
  status: 200
}

export type getApiV1OportunidadesMeiDraftsResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1OportunidadesMeiDraftsResponseComposite =
  | getApiV1OportunidadesMeiDraftsResponse200
  | getApiV1OportunidadesMeiDraftsResponse500

export type getApiV1OportunidadesMeiDraftsResponse =
  getApiV1OportunidadesMeiDraftsResponseComposite & {
    headers: Headers
  }

export const getGetApiV1OportunidadesMeiDraftsUrl = (
  params?: GetApiV1OportunidadesMeiDraftsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/oportunidades-mei/drafts?${stringifiedParams}`
    : `/api/v1/oportunidades-mei/drafts`
}

export const getApiV1OportunidadesMeiDrafts = async (
  params?: GetApiV1OportunidadesMeiDraftsParams,
  options?: RequestInit
): Promise<getApiV1OportunidadesMeiDraftsResponse> => {
  return customFetchGoRio<getApiV1OportunidadesMeiDraftsResponse>(
    getGetApiV1OportunidadesMeiDraftsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Retorna uma oportunidade MEI pelo seu ID
 * @summary Obter oportunidade MEI por ID
 */
export type getApiV1OportunidadesMeiIdResponse200 = {
  data: ModelsOportunidadeMEI
  status: 200
}

export type getApiV1OportunidadesMeiIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type getApiV1OportunidadesMeiIdResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type getApiV1OportunidadesMeiIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1OportunidadesMeiIdResponseComposite =
  | getApiV1OportunidadesMeiIdResponse200
  | getApiV1OportunidadesMeiIdResponse400
  | getApiV1OportunidadesMeiIdResponse404
  | getApiV1OportunidadesMeiIdResponse500

export type getApiV1OportunidadesMeiIdResponse =
  getApiV1OportunidadesMeiIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1OportunidadesMeiIdUrl = (id: number) => {
  return `/api/v1/oportunidades-mei/${id}`
}

export const getApiV1OportunidadesMeiId = async (
  id: number,
  options?: RequestInit
): Promise<getApiV1OportunidadesMeiIdResponse> => {
  return customFetchGoRio<getApiV1OportunidadesMeiIdResponse>(
    getGetApiV1OportunidadesMeiIdUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza os dados de uma oportunidade MEI existente mantendo seu status atual
 * @summary Atualizar oportunidade MEI
 */
export type putApiV1OportunidadesMeiIdResponse200 = {
  data: ModelsOportunidadeMEI
  status: 200
}

export type putApiV1OportunidadesMeiIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type putApiV1OportunidadesMeiIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type putApiV1OportunidadesMeiIdResponseComposite =
  | putApiV1OportunidadesMeiIdResponse200
  | putApiV1OportunidadesMeiIdResponse400
  | putApiV1OportunidadesMeiIdResponse500

export type putApiV1OportunidadesMeiIdResponse =
  putApiV1OportunidadesMeiIdResponseComposite & {
    headers: Headers
  }

export const getPutApiV1OportunidadesMeiIdUrl = (id: number) => {
  return `/api/v1/oportunidades-mei/${id}`
}

export const putApiV1OportunidadesMeiId = async (
  id: number,
  modelsOportunidadeMEIBody: ModelsOportunidadeMEIBody,
  options?: RequestInit
): Promise<putApiV1OportunidadesMeiIdResponse> => {
  return customFetchGoRio<putApiV1OportunidadesMeiIdResponse>(
    getPutApiV1OportunidadesMeiIdUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsOportunidadeMEIBody),
    }
  )
}

/**
 * Remove uma oportunidade MEI pelo ID (soft delete)
 * @summary Excluir oportunidade MEI
 */
export type deleteApiV1OportunidadesMeiIdResponse200 = {
  data: DeleteApiV1OportunidadesMeiId200
  status: 200
}

export type deleteApiV1OportunidadesMeiIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type deleteApiV1OportunidadesMeiIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type deleteApiV1OportunidadesMeiIdResponseComposite =
  | deleteApiV1OportunidadesMeiIdResponse200
  | deleteApiV1OportunidadesMeiIdResponse400
  | deleteApiV1OportunidadesMeiIdResponse500

export type deleteApiV1OportunidadesMeiIdResponse =
  deleteApiV1OportunidadesMeiIdResponseComposite & {
    headers: Headers
  }

export const getDeleteApiV1OportunidadesMeiIdUrl = (id: number) => {
  return `/api/v1/oportunidades-mei/${id}`
}

export const deleteApiV1OportunidadesMeiId = async (
  id: number,
  options?: RequestInit
): Promise<deleteApiV1OportunidadesMeiIdResponse> => {
  return customFetchGoRio<deleteApiV1OportunidadesMeiIdResponse>(
    getDeleteApiV1OportunidadesMeiIdUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

/**
 * Publica uma oportunidade MEI que estava em rascunho
 * @summary Publicar oportunidade MEI
 */
export type putApiV1OportunidadesMeiIdPublishResponse200 = {
  data: ModelsOportunidadeMEI
  status: 200
}

export type putApiV1OportunidadesMeiIdPublishResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type putApiV1OportunidadesMeiIdPublishResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type putApiV1OportunidadesMeiIdPublishResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type putApiV1OportunidadesMeiIdPublishResponseComposite =
  | putApiV1OportunidadesMeiIdPublishResponse200
  | putApiV1OportunidadesMeiIdPublishResponse400
  | putApiV1OportunidadesMeiIdPublishResponse404
  | putApiV1OportunidadesMeiIdPublishResponse500

export type putApiV1OportunidadesMeiIdPublishResponse =
  putApiV1OportunidadesMeiIdPublishResponseComposite & {
    headers: Headers
  }

export const getPutApiV1OportunidadesMeiIdPublishUrl = (id: number) => {
  return `/api/v1/oportunidades-mei/${id}/publish`
}

export const putApiV1OportunidadesMeiIdPublish = async (
  id: number,
  options?: RequestInit
): Promise<putApiV1OportunidadesMeiIdPublishResponse> => {
  return customFetchGoRio<putApiV1OportunidadesMeiIdPublishResponse>(
    getPutApiV1OportunidadesMeiIdPublishUrl(id),
    {
      ...options,
      method: 'PUT',
    }
  )
}
