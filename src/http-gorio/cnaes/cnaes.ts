/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  GetApiV1Cnaes200,
  GetApiV1CnaesParams,
  ModelsCNAE,
  ModelsErrorResponse,
} from '.././models'

import { customFetchGoRio } from '../../../custom-fetch-gorio'

/**
 * Retorna uma lista paginada de CNAEs
 * @summary Listar CNAEs
 */
export type getApiV1CnaesResponse200 = {
  data: GetApiV1Cnaes200
  status: 200
}

export type getApiV1CnaesResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1CnaesResponseComposite =
  | getApiV1CnaesResponse200
  | getApiV1CnaesResponse500

export type getApiV1CnaesResponse = getApiV1CnaesResponseComposite & {
  headers: Headers
}

export const getGetApiV1CnaesUrl = (params?: GetApiV1CnaesParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/cnaes?${stringifiedParams}`
    : `/api/v1/cnaes`
}

export const getApiV1Cnaes = async (
  params?: GetApiV1CnaesParams,
  options?: RequestInit
): Promise<getApiV1CnaesResponse> => {
  return customFetchGoRio<getApiV1CnaesResponse>(getGetApiV1CnaesUrl(params), {
    ...options,
    method: 'GET',
  })
}

/**
 * Retorna um CNAE pelo seu código
 * @summary Obter CNAE por código
 */
export type getApiV1CnaesCodigoResponse200 = {
  data: ModelsCNAE
  status: 200
}

export type getApiV1CnaesCodigoResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type getApiV1CnaesCodigoResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1CnaesCodigoResponseComposite =
  | getApiV1CnaesCodigoResponse200
  | getApiV1CnaesCodigoResponse404
  | getApiV1CnaesCodigoResponse500

export type getApiV1CnaesCodigoResponse =
  getApiV1CnaesCodigoResponseComposite & {
    headers: Headers
  }

export const getGetApiV1CnaesCodigoUrl = (codigo: string) => {
  return `/api/v1/cnaes/${codigo}`
}

export const getApiV1CnaesCodigo = async (
  codigo: string,
  options?: RequestInit
): Promise<getApiV1CnaesCodigoResponse> => {
  return customFetchGoRio<getApiV1CnaesCodigoResponse>(
    getGetApiV1CnaesCodigoUrl(codigo),
    {
      ...options,
      method: 'GET',
    }
  )
}
