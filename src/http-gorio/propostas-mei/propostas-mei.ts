/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteApiV1OportunidadesMeiIdPropostasPropostaId200,
  GetApiV1OportunidadesMeiIdPropostas200,
  GetApiV1OportunidadesMeiIdPropostasParams,
  GetApiV1PropostasMeiPorEmpresa200,
  GetApiV1PropostasMeiPorEmpresaParams,
  ModelsErrorResponse,
  ModelsPropostaMEI,
  PutApiV1OportunidadesMeiIdPropostasPropostaIdStatusBody,
} from '.././models'

import { customFetchGoRio } from '../../../custom-fetch-gorio'

/**
 * Retorna uma lista paginada de propostas MEI para uma oportunidade
 * @summary Listar propostas MEI por oportunidade
 */
export type getApiV1OportunidadesMeiIdPropostasResponse200 = {
  data: GetApiV1OportunidadesMeiIdPropostas200
  status: 200
}

export type getApiV1OportunidadesMeiIdPropostasResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1OportunidadesMeiIdPropostasResponseComposite =
  | getApiV1OportunidadesMeiIdPropostasResponse200
  | getApiV1OportunidadesMeiIdPropostasResponse500

export type getApiV1OportunidadesMeiIdPropostasResponse =
  getApiV1OportunidadesMeiIdPropostasResponseComposite & {
    headers: Headers
  }

export const getGetApiV1OportunidadesMeiIdPropostasUrl = (
  id: number,
  params?: GetApiV1OportunidadesMeiIdPropostasParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/oportunidades-mei/${id}/propostas?${stringifiedParams}`
    : `/api/v1/oportunidades-mei/${id}/propostas`
}

export const getApiV1OportunidadesMeiIdPropostas = async (
  id: number,
  params?: GetApiV1OportunidadesMeiIdPropostasParams,
  options?: RequestInit
): Promise<getApiV1OportunidadesMeiIdPropostasResponse> => {
  return customFetchGoRio<getApiV1OportunidadesMeiIdPropostasResponse>(
    getGetApiV1OportunidadesMeiIdPropostasUrl(id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria uma nova proposta MEI para uma oportunidade
 * @summary Criar proposta MEI
 */
export type postApiV1OportunidadesMeiIdPropostasResponse201 = {
  data: ModelsPropostaMEI
  status: 201
}

export type postApiV1OportunidadesMeiIdPropostasResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1OportunidadesMeiIdPropostasResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1OportunidadesMeiIdPropostasResponseComposite =
  | postApiV1OportunidadesMeiIdPropostasResponse201
  | postApiV1OportunidadesMeiIdPropostasResponse400
  | postApiV1OportunidadesMeiIdPropostasResponse500

export type postApiV1OportunidadesMeiIdPropostasResponse =
  postApiV1OportunidadesMeiIdPropostasResponseComposite & {
    headers: Headers
  }

export const getPostApiV1OportunidadesMeiIdPropostasUrl = (id: number) => {
  return `/api/v1/oportunidades-mei/${id}/propostas`
}

export const postApiV1OportunidadesMeiIdPropostas = async (
  id: number,
  modelsPropostaMEI: ModelsPropostaMEI,
  options?: RequestInit
): Promise<postApiV1OportunidadesMeiIdPropostasResponse> => {
  return customFetchGoRio<postApiV1OportunidadesMeiIdPropostasResponse>(
    getPostApiV1OportunidadesMeiIdPropostasUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsPropostaMEI),
    }
  )
}

/**
 * Retorna uma proposta MEI pelo seu ID
 * @summary Obter proposta MEI por ID
 */
export type getApiV1OportunidadesMeiIdPropostasPropostaIdResponse200 = {
  data: ModelsPropostaMEI
  status: 200
}

export type getApiV1OportunidadesMeiIdPropostasPropostaIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type getApiV1OportunidadesMeiIdPropostasPropostaIdResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type getApiV1OportunidadesMeiIdPropostasPropostaIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1OportunidadesMeiIdPropostasPropostaIdResponseComposite =
  | getApiV1OportunidadesMeiIdPropostasPropostaIdResponse200
  | getApiV1OportunidadesMeiIdPropostasPropostaIdResponse400
  | getApiV1OportunidadesMeiIdPropostasPropostaIdResponse404
  | getApiV1OportunidadesMeiIdPropostasPropostaIdResponse500

export type getApiV1OportunidadesMeiIdPropostasPropostaIdResponse =
  getApiV1OportunidadesMeiIdPropostasPropostaIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1OportunidadesMeiIdPropostasPropostaIdUrl = (
  id: number,
  propostaId: string
) => {
  return `/api/v1/oportunidades-mei/${id}/propostas/${propostaId}`
}

export const getApiV1OportunidadesMeiIdPropostasPropostaId = async (
  id: number,
  propostaId: string,
  options?: RequestInit
): Promise<getApiV1OportunidadesMeiIdPropostasPropostaIdResponse> => {
  return customFetchGoRio<getApiV1OportunidadesMeiIdPropostasPropostaIdResponse>(
    getGetApiV1OportunidadesMeiIdPropostasPropostaIdUrl(id, propostaId),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Remove uma proposta MEI pelo ID (soft delete)
 * @summary Excluir proposta MEI
 */
export type deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse200 = {
  data: DeleteApiV1OportunidadesMeiIdPropostasPropostaId200
  status: 200
}

export type deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponseComposite =
  | deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse200
  | deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse400
  | deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse500

export type deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse =
  deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponseComposite & {
    headers: Headers
  }

export const getDeleteApiV1OportunidadesMeiIdPropostasPropostaIdUrl = (
  id: number,
  propostaId: string
) => {
  return `/api/v1/oportunidades-mei/${id}/propostas/${propostaId}`
}

export const deleteApiV1OportunidadesMeiIdPropostasPropostaId = async (
  id: number,
  propostaId: string,
  options?: RequestInit
): Promise<deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse> => {
  return customFetchGoRio<deleteApiV1OportunidadesMeiIdPropostasPropostaIdResponse>(
    getDeleteApiV1OportunidadesMeiIdPropostasPropostaIdUrl(id, propostaId),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

/**
 * Atualiza o status de uma proposta MEI (aprovar ou rejeitar)
 * @summary Atualizar status da proposta MEI
 */
export type putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse200 = {
  data: ModelsPropostaMEI
  status: 200
}

export type putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponseComposite =
  | putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse200
  | putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse400
  | putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse500

export type putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse =
  putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponseComposite & {
    headers: Headers
  }

export const getPutApiV1OportunidadesMeiIdPropostasPropostaIdStatusUrl = (
  id: number,
  propostaId: string
) => {
  return `/api/v1/oportunidades-mei/${id}/propostas/${propostaId}/status`
}

export const putApiV1OportunidadesMeiIdPropostasPropostaIdStatus = async (
  id: number,
  propostaId: string,
  putApiV1OportunidadesMeiIdPropostasPropostaIdStatusBody: PutApiV1OportunidadesMeiIdPropostasPropostaIdStatusBody,
  options?: RequestInit
): Promise<putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse> => {
  return customFetchGoRio<putApiV1OportunidadesMeiIdPropostasPropostaIdStatusResponse>(
    getPutApiV1OportunidadesMeiIdPropostasPropostaIdStatusUrl(id, propostaId),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(
        putApiV1OportunidadesMeiIdPropostasPropostaIdStatusBody
      ),
    }
  )
}

/**
 * Retorna uma lista paginada de propostas MEI de uma empresa
 * @summary Listar propostas MEI por MEI empresa
 */
export type getApiV1PropostasMeiPorEmpresaResponse200 = {
  data: GetApiV1PropostasMeiPorEmpresa200
  status: 200
}

export type getApiV1PropostasMeiPorEmpresaResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type getApiV1PropostasMeiPorEmpresaResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1PropostasMeiPorEmpresaResponseComposite =
  | getApiV1PropostasMeiPorEmpresaResponse200
  | getApiV1PropostasMeiPorEmpresaResponse400
  | getApiV1PropostasMeiPorEmpresaResponse500

export type getApiV1PropostasMeiPorEmpresaResponse =
  getApiV1PropostasMeiPorEmpresaResponseComposite & {
    headers: Headers
  }

export const getGetApiV1PropostasMeiPorEmpresaUrl = (
  params: GetApiV1PropostasMeiPorEmpresaParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/propostas-mei/por-empresa?${stringifiedParams}`
    : `/api/v1/propostas-mei/por-empresa`
}

export const getApiV1PropostasMeiPorEmpresa = async (
  params: GetApiV1PropostasMeiPorEmpresaParams,
  options?: RequestInit
): Promise<getApiV1PropostasMeiPorEmpresaResponse> => {
  return customFetchGoRio<getApiV1PropostasMeiPorEmpresaResponse>(
    getGetApiV1PropostasMeiPorEmpresaUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}
