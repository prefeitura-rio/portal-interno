/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API Go
 * API de serviços para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  GetApiV1MeiEmpresas200,
  GetApiV1MeiEmpresasParams,
  ModelsErrorResponse,
  ModelsMEIEmpresa,
  ModelsMEIEmpresaBody,
} from '.././models'

import { customFetchGoRio } from '../../../custom-fetch-gorio'

/**
 * Retorna uma lista paginada de MEI empresas
 * @summary Listar MEI empresas
 */
export type getApiV1MeiEmpresasResponse200 = {
  data: GetApiV1MeiEmpresas200
  status: 200
}

export type getApiV1MeiEmpresasResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1MeiEmpresasResponseComposite =
  | getApiV1MeiEmpresasResponse200
  | getApiV1MeiEmpresasResponse500

export type getApiV1MeiEmpresasResponse =
  getApiV1MeiEmpresasResponseComposite & {
    headers: Headers
  }

export const getGetApiV1MeiEmpresasUrl = (
  params?: GetApiV1MeiEmpresasParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/mei-empresas?${stringifiedParams}`
    : `/api/v1/mei-empresas`
}

export const getApiV1MeiEmpresas = async (
  params?: GetApiV1MeiEmpresasParams,
  options?: RequestInit
): Promise<getApiV1MeiEmpresasResponse> => {
  return customFetchGoRio<getApiV1MeiEmpresasResponse>(
    getGetApiV1MeiEmpresasUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria um novo registro de MEI empresa
 * @summary Registrar MEI empresa
 */
export type postApiV1MeiEmpresasResponse201 = {
  data: ModelsMEIEmpresa
  status: 201
}

export type postApiV1MeiEmpresasResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1MeiEmpresasResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1MeiEmpresasResponseComposite =
  | postApiV1MeiEmpresasResponse201
  | postApiV1MeiEmpresasResponse400
  | postApiV1MeiEmpresasResponse500

export type postApiV1MeiEmpresasResponse =
  postApiV1MeiEmpresasResponseComposite & {
    headers: Headers
  }

export const getPostApiV1MeiEmpresasUrl = () => {
  return `/api/v1/mei-empresas`
}

export const postApiV1MeiEmpresas = async (
  modelsMEIEmpresaBody: ModelsMEIEmpresaBody,
  options?: RequestInit
): Promise<postApiV1MeiEmpresasResponse> => {
  return customFetchGoRio<postApiV1MeiEmpresasResponse>(
    getPostApiV1MeiEmpresasUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsMEIEmpresaBody),
    }
  )
}

/**
 * Retorna uma MEI empresa pelo seu CNPJ
 * @summary Buscar MEI empresa por CNPJ
 */
export type getApiV1MeiEmpresasCnpjCnpjResponse200 = {
  data: ModelsMEIEmpresa
  status: 200
}

export type getApiV1MeiEmpresasCnpjCnpjResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type getApiV1MeiEmpresasCnpjCnpjResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1MeiEmpresasCnpjCnpjResponseComposite =
  | getApiV1MeiEmpresasCnpjCnpjResponse200
  | getApiV1MeiEmpresasCnpjCnpjResponse404
  | getApiV1MeiEmpresasCnpjCnpjResponse500

export type getApiV1MeiEmpresasCnpjCnpjResponse =
  getApiV1MeiEmpresasCnpjCnpjResponseComposite & {
    headers: Headers
  }

export const getGetApiV1MeiEmpresasCnpjCnpjUrl = (cnpj: string) => {
  return `/api/v1/mei-empresas/cnpj/${cnpj}`
}

export const getApiV1MeiEmpresasCnpjCnpj = async (
  cnpj: string,
  options?: RequestInit
): Promise<getApiV1MeiEmpresasCnpjCnpjResponse> => {
  return customFetchGoRio<getApiV1MeiEmpresasCnpjCnpjResponse>(
    getGetApiV1MeiEmpresasCnpjCnpjUrl(cnpj),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Retorna uma MEI empresa pelo seu ID
 * @summary Obter MEI empresa por ID
 */
export type getApiV1MeiEmpresasIdResponse200 = {
  data: ModelsMEIEmpresa
  status: 200
}

export type getApiV1MeiEmpresasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type getApiV1MeiEmpresasIdResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type getApiV1MeiEmpresasIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1MeiEmpresasIdResponseComposite =
  | getApiV1MeiEmpresasIdResponse200
  | getApiV1MeiEmpresasIdResponse400
  | getApiV1MeiEmpresasIdResponse404
  | getApiV1MeiEmpresasIdResponse500

export type getApiV1MeiEmpresasIdResponse =
  getApiV1MeiEmpresasIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1MeiEmpresasIdUrl = (id: number) => {
  return `/api/v1/mei-empresas/${id}`
}

export const getApiV1MeiEmpresasId = async (
  id: number,
  options?: RequestInit
): Promise<getApiV1MeiEmpresasIdResponse> => {
  return customFetchGoRio<getApiV1MeiEmpresasIdResponse>(
    getGetApiV1MeiEmpresasIdUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Atualiza os dados de uma MEI empresa existente
 * @summary Atualizar MEI empresa
 */
export type putApiV1MeiEmpresasIdResponse200 = {
  data: ModelsMEIEmpresa
  status: 200
}

export type putApiV1MeiEmpresasIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type putApiV1MeiEmpresasIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type putApiV1MeiEmpresasIdResponseComposite =
  | putApiV1MeiEmpresasIdResponse200
  | putApiV1MeiEmpresasIdResponse400
  | putApiV1MeiEmpresasIdResponse500

export type putApiV1MeiEmpresasIdResponse =
  putApiV1MeiEmpresasIdResponseComposite & {
    headers: Headers
  }

export const getPutApiV1MeiEmpresasIdUrl = (id: number) => {
  return `/api/v1/mei-empresas/${id}`
}

export const putApiV1MeiEmpresasId = async (
  id: number,
  modelsMEIEmpresaBody: ModelsMEIEmpresaBody,
  options?: RequestInit
): Promise<putApiV1MeiEmpresasIdResponse> => {
  return customFetchGoRio<putApiV1MeiEmpresasIdResponse>(
    getPutApiV1MeiEmpresasIdUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsMEIEmpresaBody),
    }
  )
}
