/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API Go
 * API de servi√ßos para aplicativos da Prefeitura do Rio
 * OpenAPI spec version: 1.0
 */
import type {
  DeleteApiV1CoursesCourseIdEnrollmentsEnrollmentId200,
  GetApiV1CoursesCourseIdEnrollments200,
  GetApiV1CoursesCourseIdEnrollmentsParams,
  ModelsCertificateUpdateRequest,
  ModelsCertificateUpdateResponse,
  ModelsEnrollmentStatusUpdateRequest,
  ModelsEnrollmentStatusUpdateResponse,
  ModelsErrorResponse,
  ModelsInscricao,
  PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatus200,
  PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody,
} from '.././models'

import { customFetchGoRio } from '../../../custom-fetch-gorio'

/**
 * Retorna lista paginada de inscri√ß√µes de um curso espec√≠fico
 * @summary Listar inscri√ß√µes de um curso
 */
export type getApiV1CoursesCourseIdEnrollmentsResponse200 = {
  data: GetApiV1CoursesCourseIdEnrollments200
  status: 200
}

export type getApiV1CoursesCourseIdEnrollmentsResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type getApiV1CoursesCourseIdEnrollmentsResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1CoursesCourseIdEnrollmentsResponseComposite =
  | getApiV1CoursesCourseIdEnrollmentsResponse200
  | getApiV1CoursesCourseIdEnrollmentsResponse400
  | getApiV1CoursesCourseIdEnrollmentsResponse500

export type getApiV1CoursesCourseIdEnrollmentsResponse =
  getApiV1CoursesCourseIdEnrollmentsResponseComposite & {
    headers: Headers
  }

export const getGetApiV1CoursesCourseIdEnrollmentsUrl = (
  courseId: number,
  params?: GetApiV1CoursesCourseIdEnrollmentsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/courses/${courseId}/enrollments?${stringifiedParams}`
    : `/api/v1/courses/${courseId}/enrollments`
}

export const getApiV1CoursesCourseIdEnrollments = async (
  courseId: number,
  params?: GetApiV1CoursesCourseIdEnrollmentsParams,
  options?: RequestInit
): Promise<getApiV1CoursesCourseIdEnrollmentsResponse> => {
  return customFetchGoRio<getApiV1CoursesCourseIdEnrollmentsResponse>(
    getGetApiV1CoursesCourseIdEnrollmentsUrl(courseId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Cria uma nova inscri√ß√£o em um curso
 * @summary Criar inscri√ß√£o
 */
export type postApiV1CoursesCourseIdEnrollmentsResponse201 = {
  data: ModelsInscricao
  status: 201
}

export type postApiV1CoursesCourseIdEnrollmentsResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1CoursesCourseIdEnrollmentsResponse409 = {
  data: ModelsErrorResponse
  status: 409
}

export type postApiV1CoursesCourseIdEnrollmentsResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1CoursesCourseIdEnrollmentsResponseComposite =
  | postApiV1CoursesCourseIdEnrollmentsResponse201
  | postApiV1CoursesCourseIdEnrollmentsResponse400
  | postApiV1CoursesCourseIdEnrollmentsResponse409
  | postApiV1CoursesCourseIdEnrollmentsResponse500

export type postApiV1CoursesCourseIdEnrollmentsResponse =
  postApiV1CoursesCourseIdEnrollmentsResponseComposite & {
    headers: Headers
  }

export const getPostApiV1CoursesCourseIdEnrollmentsUrl = (courseId: number) => {
  return `/api/v1/courses/${courseId}/enrollments`
}

export const postApiV1CoursesCourseIdEnrollments = async (
  courseId: number,
  modelsInscricao: ModelsInscricao,
  options?: RequestInit
): Promise<postApiV1CoursesCourseIdEnrollmentsResponse> => {
  return customFetchGoRio<postApiV1CoursesCourseIdEnrollmentsResponse>(
    getPostApiV1CoursesCourseIdEnrollmentsUrl(courseId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsInscricao),
    }
  )
}

/**
 * Atualiza o status de v√°rias inscri√ß√µes de uma vez (aprova√ß√£o em lote)
 * @summary Atualizar status de m√∫ltiplas inscri√ß√µes
 */
export type putApiV1CoursesCourseIdEnrollmentsStatusResponse200 = {
  data: ModelsEnrollmentStatusUpdateResponse
  status: 200
}

export type putApiV1CoursesCourseIdEnrollmentsStatusResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type putApiV1CoursesCourseIdEnrollmentsStatusResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type putApiV1CoursesCourseIdEnrollmentsStatusResponseComposite =
  | putApiV1CoursesCourseIdEnrollmentsStatusResponse200
  | putApiV1CoursesCourseIdEnrollmentsStatusResponse400
  | putApiV1CoursesCourseIdEnrollmentsStatusResponse500

export type putApiV1CoursesCourseIdEnrollmentsStatusResponse =
  putApiV1CoursesCourseIdEnrollmentsStatusResponseComposite & {
    headers: Headers
  }

export const getPutApiV1CoursesCourseIdEnrollmentsStatusUrl = (
  courseId: number
) => {
  return `/api/v1/courses/${courseId}/enrollments/status`
}

export const putApiV1CoursesCourseIdEnrollmentsStatus = async (
  courseId: number,
  modelsEnrollmentStatusUpdateRequest: ModelsEnrollmentStatusUpdateRequest,
  options?: RequestInit
): Promise<putApiV1CoursesCourseIdEnrollmentsStatusResponse> => {
  return customFetchGoRio<putApiV1CoursesCourseIdEnrollmentsStatusResponse>(
    getPutApiV1CoursesCourseIdEnrollmentsStatusUrl(courseId),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsEnrollmentStatusUpdateRequest),
    }
  )
}

/**
 * Retorna dados completos de uma inscri√ß√£o espec√≠fica
 * @summary Obter inscri√ß√£o por ID
 */
export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200 = {
  data: ModelsInscricao
  status: 200
}

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse403 = {
  data: ModelsErrorResponse
  status: 403
}

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite =
  | getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200
  | getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400
  | getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse403
  | getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse404
  | getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse500

export type getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse =
  getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite & {
    headers: Headers
  }

export const getGetApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl = (
  courseId: number,
  enrollmentId: string
) => {
  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}`
}

export const getApiV1CoursesCourseIdEnrollmentsEnrollmentId = async (
  courseId: number,
  enrollmentId: string,
  options?: RequestInit
): Promise<getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse> => {
  return customFetchGoRio<getApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse>(
    getGetApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl(
      courseId,
      enrollmentId
    ),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Remove uma inscri√ß√£o espec√≠fica
 * @summary Excluir inscri√ß√£o
 */
export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200 = {
  data: DeleteApiV1CoursesCourseIdEnrollmentsEnrollmentId200
  status: 200
}

export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite =
  | deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse200
  | deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse400
  | deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse404
  | deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse500

export type deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse =
  deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponseComposite & {
    headers: Headers
  }

export const getDeleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl = (
  courseId: number,
  enrollmentId: string
) => {
  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}`
}

export const deleteApiV1CoursesCourseIdEnrollmentsEnrollmentId = async (
  courseId: number,
  enrollmentId: string,
  options?: RequestInit
): Promise<deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse> => {
  return customFetchGoRio<deleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdResponse>(
    getDeleteApiV1CoursesCourseIdEnrollmentsEnrollmentIdUrl(
      courseId,
      enrollmentId
    ),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

/**
 * Adiciona ou atualiza a URL do certificado de uma inscri√ß√£o
 * @summary Atualizar certificado de inscri√ß√£o
 */
export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse200 =
  {
    data: ModelsCertificateUpdateResponse
    status: 200
  }

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse400 =
  {
    data: ModelsErrorResponse
    status: 400
  }

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse403 =
  {
    data: ModelsErrorResponse
    status: 403
  }

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse404 =
  {
    data: ModelsErrorResponse
    status: 404
  }

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse500 =
  {
    data: ModelsErrorResponse
    status: 500
  }

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponseComposite =
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse200
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse400
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse403
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse404
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse500

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse =
  putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponseComposite & {
    headers: Headers
  }

export const getPutApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateUrl = (
  courseId: number,
  enrollmentId: string
) => {
  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}/certificate`
}

export const putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificate = async (
  courseId: number,
  enrollmentId: string,
  modelsCertificateUpdateRequest: ModelsCertificateUpdateRequest,
  options?: RequestInit
): Promise<putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse> => {
  return customFetchGoRio<putApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateResponse>(
    getPutApiV1CoursesCourseIdEnrollmentsEnrollmentIdCertificateUrl(
      courseId,
      enrollmentId
    ),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCertificateUpdateRequest),
    }
  )
}

/**
 * Atualiza o status de uma inscri√ß√£o espec√≠fica
 * @summary Atualizar status de inscri√ß√£o individual
 */
export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse200 = {
  data: PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatus200
  status: 200
}

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse404 = {
  data: ModelsErrorResponse
  status: 404
}

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponseComposite =
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse200
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse400
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse404
  | putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse500

export type putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse =
  putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponseComposite & {
    headers: Headers
  }

export const getPutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusUrl = (
  courseId: number,
  enrollmentId: string
) => {
  return `/api/v1/courses/${courseId}/enrollments/${enrollmentId}/status`
}

export const putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatus = async (
  courseId: number,
  enrollmentId: string,
  putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody: PutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody,
  options?: RequestInit
): Promise<putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse> => {
  return customFetchGoRio<putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusResponse>(
    getPutApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusUrl(
      courseId,
      enrollmentId
    ),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(
        putApiV1CoursesCourseIdEnrollmentsEnrollmentIdStatusBody
      ),
    }
  )
}

/**
 * Cria uma inscri√ß√£o manual no curso (para uso do admin). Aplica mesmas valida√ß√µes do endpoint regular.
 * @summary Criar inscri√ß√£o manual
 */
export type postApiV1CoursesCourseIdEnrollmentsManualResponse201 = {
  data: ModelsInscricao
  status: 201
}

export type postApiV1CoursesCourseIdEnrollmentsManualResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1CoursesCourseIdEnrollmentsManualResponse409 = {
  data: ModelsErrorResponse
  status: 409
}

export type postApiV1CoursesCourseIdEnrollmentsManualResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1CoursesCourseIdEnrollmentsManualResponseComposite =
  | postApiV1CoursesCourseIdEnrollmentsManualResponse201
  | postApiV1CoursesCourseIdEnrollmentsManualResponse400
  | postApiV1CoursesCourseIdEnrollmentsManualResponse409
  | postApiV1CoursesCourseIdEnrollmentsManualResponse500

export type postApiV1CoursesCourseIdEnrollmentsManualResponse =
  postApiV1CoursesCourseIdEnrollmentsManualResponseComposite & {
    headers: Headers
  }

export const getPostApiV1CoursesCourseIdEnrollmentsManualUrl = (
  courseId: number
) => {
  return `/api/v1/courses/${courseId}/enrollments/manual`
}

export const postApiV1CoursesCourseIdEnrollmentsManual = async (
  courseId: number,
  modelsInscricao: ModelsInscricao,
  options?: RequestInit
): Promise<postApiV1CoursesCourseIdEnrollmentsManualResponse> => {
  return customFetchGoRio<postApiV1CoursesCourseIdEnrollmentsManualResponse>(
    getPostApiV1CoursesCourseIdEnrollmentsManualUrl(courseId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsInscricao),
    }
  )
}

/**
 * Importa inscri√ß√µes em lote atrav√©s de planilha CSV ou XLSX
 * @summary Importar inscri√ß√µes via planilha
 */
export type postApiV1CoursesCourseIdEnrollmentsImportResponse202 = {
  data: { job_id: string; message: string }
  status: 202
}

export type postApiV1CoursesCourseIdEnrollmentsImportResponse400 = {
  data: ModelsErrorResponse
  status: 400
}

export type postApiV1CoursesCourseIdEnrollmentsImportResponse500 = {
  data: ModelsErrorResponse
  status: 500
}

export type postApiV1CoursesCourseIdEnrollmentsImportResponseComposite =
  | postApiV1CoursesCourseIdEnrollmentsImportResponse202
  | postApiV1CoursesCourseIdEnrollmentsImportResponse400
  | postApiV1CoursesCourseIdEnrollmentsImportResponse500

export type postApiV1CoursesCourseIdEnrollmentsImportResponse =
  postApiV1CoursesCourseIdEnrollmentsImportResponseComposite & {
    headers: Headers
  }

export const getPostApiV1CoursesCourseIdEnrollmentsImportUrl = (
  courseId: number
) => {
  return `/api/v1/courses/${courseId}/enrollments/import`
}

export const postApiV1CoursesCourseIdEnrollmentsImport = async (
  courseId: number,
  file: File,
  options?: RequestInit
): Promise<postApiV1CoursesCourseIdEnrollmentsImportResponse> => {
  const formData = new FormData()
  formData.append('file', file)

  return customFetchGoRio<postApiV1CoursesCourseIdEnrollmentsImportResponse>(
    getPostApiV1CoursesCourseIdEnrollmentsImportUrl(courseId),
    {
      ...options,
      method: 'POST',
      body: formData,
    }
  )
}
