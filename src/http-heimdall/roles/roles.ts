/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Heimdall Admin Service
 * # Heimdall Admin Service API

A comprehensive admin service for user and group management with authorization powered by Cerbos.

## Features

- **User Management**: Automatic user creation from JWT tokens with role-based access control
- **Group Management**: Create, manage, and assign users to groups with hierarchical permissions
- **Role Management**: Define and assign roles to users and groups
- **Mapping Management**: Configure API endpoint to action mappings for authorization
- **Action Management**: Define available actions for fine-grained permission control
- **Cerbos Integration**: Policy-based authorization with external Cerbos service
- **Audit Logging**: Comprehensive audit trail for all administrative operations
- **Redis Caching**: High-performance caching for frequently accessed data
 * OpenAPI spec version: 1.0.0
 */
import type {
  AppRoutersRolesActionResponse,
  HTTPValidationError,
  ListRolesApiV1RolesGetParams,
  PaginatedResponseRoleResponse,
  RoleActionRequest,
  RoleActionResponse,
  RoleAssignRequest,
  RoleAssignmentResponse,
  RoleCreateRequest,
  RoleResponse,
} from '.././models'

import { customFetchHeimdall } from '../../../custom-fetch-heimdall'

/**
 * Create a role (admin-only).
Implements POST /roles as specified in SPEC.md Section 3.4.
 * @summary Create Role
 */
export type createRoleApiV1RolesPostResponse201 = {
  data: RoleResponse
  status: 201
}

export type createRoleApiV1RolesPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type createRoleApiV1RolesPostResponseComposite =
  | createRoleApiV1RolesPostResponse201
  | createRoleApiV1RolesPostResponse422

export type createRoleApiV1RolesPostResponse =
  createRoleApiV1RolesPostResponseComposite & {
    headers: Headers
  }

export const getCreateRoleApiV1RolesPostUrl = () => {
  return `/api/v1/roles/`
}

export const createRoleApiV1RolesPost = async (
  roleCreateRequest: RoleCreateRequest,
  options?: RequestInit
): Promise<createRoleApiV1RolesPostResponse> => {
  return customFetchHeimdall<createRoleApiV1RolesPostResponse>(
    getCreateRoleApiV1RolesPostUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(roleCreateRequest),
    }
  )
}

/**
 * List all roles available in the system.

**Authorization**: All authenticated users can list roles.

**Pagination**: Use `skip` and `limit` parameters to control pagination.
Maximum limit is 100 roles per request.

**Use Cases**:
- Display available roles in user interfaces
- Role selection during group or user management
- Administrative overview of system roles
- Integration with external systems requiring role information

**System Roles**: The system includes built-in roles like `superadmin` which cannot be deleted.
 * @summary List all roles
 */
export type listRolesApiV1RolesGetResponse200 = {
  data: PaginatedResponseRoleResponse
  status: 200
}

export type listRolesApiV1RolesGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type listRolesApiV1RolesGetResponseComposite =
  | listRolesApiV1RolesGetResponse200
  | listRolesApiV1RolesGetResponse422

export type listRolesApiV1RolesGetResponse =
  listRolesApiV1RolesGetResponseComposite & {
    headers: Headers
  }

export const getListRolesApiV1RolesGetUrl = (
  params?: ListRolesApiV1RolesGetParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/roles/?${stringifiedParams}`
    : `/api/v1/roles/`
}

export const listRolesApiV1RolesGet = async (
  params?: ListRolesApiV1RolesGetParams,
  options?: RequestInit
): Promise<listRolesApiV1RolesGetResponse> => {
  return customFetchHeimdall<listRolesApiV1RolesGetResponse>(
    getListRolesApiV1RolesGetUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * List all roles assigned to a specific group.

**Authorization**: Users can view roles of groups they have permission to access.
Permissions are checked via Cerbos policies.

**Role Information**: Returns each role's ID, name, and description.

**Use Cases**:
- View group permissions and capabilities
- Audit group role assignments
- Administrative oversight of access control
- Verify role inheritance for group members

**Sorting**: Roles are returned sorted by name (alphabetical order).
 * @summary List roles assigned to a group
 */
export type listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse200 = {
  data: RoleResponse[]
  status: 200
}

export type listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponseComposite =
  | listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse200
  | listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse422

export type listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse =
  listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponseComposite & {
    headers: Headers
  }

export const getListGroupRolesApiV1RolesGroupsGroupNameRolesGetUrl = (
  groupName: string
) => {
  return `/api/v1/roles/groups/${groupName}/roles`
}

export const listGroupRolesApiV1RolesGroupsGroupNameRolesGet = async (
  groupName: string,
  options?: RequestInit
): Promise<listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse> => {
  return customFetchHeimdall<listGroupRolesApiV1RolesGroupsGroupNameRolesGetResponse>(
    getListGroupRolesApiV1RolesGroupsGroupNameRolesGetUrl(groupName),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Assign role to group.
Implements POST /groups/{groupName}/roles as specified in SPEC.md Section 3.4.
 * @summary Assign Role To Group
 */
export type assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse200 = {
  data: RoleAssignmentResponse
  status: 200
}

export type assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponseComposite =
  | assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse200
  | assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse422

export type assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse =
  assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponseComposite & {
    headers: Headers
  }

export const getAssignRoleToGroupApiV1RolesGroupsGroupNameRolesPostUrl = (
  groupName: string
) => {
  return `/api/v1/roles/groups/${groupName}/roles`
}

export const assignRoleToGroupApiV1RolesGroupsGroupNameRolesPost = async (
  groupName: string,
  roleAssignRequest: RoleAssignRequest,
  options?: RequestInit
): Promise<assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse> => {
  return customFetchHeimdall<assignRoleToGroupApiV1RolesGroupsGroupNameRolesPostResponse>(
    getAssignRoleToGroupApiV1RolesGroupsGroupNameRolesPostUrl(groupName),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(roleAssignRequest),
    }
  )
}

/**
 * Remove role from group.
Implements DELETE /groups/{groupName}/roles/{roleName} as specified in SPEC.md Section 3.4.
 * @summary Remove Role From Group
 */
export type removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse204 =
  {
    data: null
    status: 204
  }

export type removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse422 =
  {
    data: HTTPValidationError
    status: 422
  }

export type removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponseComposite =
  | removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse204
  | removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse422

export type removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse =
  removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponseComposite & {
    headers: Headers
  }

export const getRemoveRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteUrl =
  (groupName: string, roleName: string) => {
    return `/api/v1/roles/groups/${groupName}/roles/${roleName}`
  }

export const removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDelete =
  async (
    groupName: string,
    roleName: string,
    options?: RequestInit
  ): Promise<removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse> => {
    return customFetchHeimdall<removeRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteResponse>(
      getRemoveRoleFromGroupApiV1RolesGroupsGroupNameRolesRoleNameDeleteUrl(
        groupName,
        roleName
      ),
      {
        ...options,
        method: 'DELETE',
      }
    )
  }

/**
 * List all actions that a specific role can perform.

**Authorization**: Users can view actions for roles they have permission to access.
Permissions are checked via Cerbos policies.

**Action Information**: Returns each action's ID, name, and description.

**Use Cases**:
- Audit role permissions and capabilities
- Verify role-based access control configuration
- Administrative oversight of security policies
- Integration with external systems requiring permission information

**Sorting**: Actions are returned sorted by name (alphabetical order).

**Note**: This endpoint returns actions based on current Cerbos policy configuration.
 * @summary List actions allowed for a role
 */
export type listRoleActionsApiV1RolesRoleNameActionsGetResponse200 = {
  data: AppRoutersRolesActionResponse[]
  status: 200
}

export type listRoleActionsApiV1RolesRoleNameActionsGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type listRoleActionsApiV1RolesRoleNameActionsGetResponseComposite =
  | listRoleActionsApiV1RolesRoleNameActionsGetResponse200
  | listRoleActionsApiV1RolesRoleNameActionsGetResponse422

export type listRoleActionsApiV1RolesRoleNameActionsGetResponse =
  listRoleActionsApiV1RolesRoleNameActionsGetResponseComposite & {
    headers: Headers
  }

export const getListRoleActionsApiV1RolesRoleNameActionsGetUrl = (
  roleName: string
) => {
  return `/api/v1/roles/${roleName}/actions`
}

export const listRoleActionsApiV1RolesRoleNameActionsGet = async (
  roleName: string,
  options?: RequestInit
): Promise<listRoleActionsApiV1RolesRoleNameActionsGetResponse> => {
  return customFetchHeimdall<listRoleActionsApiV1RolesRoleNameActionsGetResponse>(
    getListRoleActionsApiV1RolesRoleNameActionsGetUrl(roleName),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Grant a specific action permission to a role.

**Authorization**: Users can modify role permissions they have access to manage.
Permissions are checked via Cerbos policies.

**Action Assignment**: Adds the specified action to the role's allowed permissions.

**Use Cases**:
- Grant new permissions to existing roles
- Administrative role management
- Dynamic permission assignment
- Security policy updates

**Policy Updates**: Changes are propagated to Cerbos policy engine for immediate effect.

**Note**: This endpoint manages role permissions through Cerbos policy configuration.
 * @summary Add action permission to a role
 */
export type assignActionToRoleApiV1RolesRoleNameActionsPostResponse200 = {
  data: RoleActionResponse
  status: 200
}

export type assignActionToRoleApiV1RolesRoleNameActionsPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type assignActionToRoleApiV1RolesRoleNameActionsPostResponseComposite =
  | assignActionToRoleApiV1RolesRoleNameActionsPostResponse200
  | assignActionToRoleApiV1RolesRoleNameActionsPostResponse422

export type assignActionToRoleApiV1RolesRoleNameActionsPostResponse =
  assignActionToRoleApiV1RolesRoleNameActionsPostResponseComposite & {
    headers: Headers
  }

export const getAssignActionToRoleApiV1RolesRoleNameActionsPostUrl = (
  roleName: string
) => {
  return `/api/v1/roles/${roleName}/actions`
}

export const assignActionToRoleApiV1RolesRoleNameActionsPost = async (
  roleName: string,
  roleActionRequest: RoleActionRequest,
  options?: RequestInit
): Promise<assignActionToRoleApiV1RolesRoleNameActionsPostResponse> => {
  return customFetchHeimdall<assignActionToRoleApiV1RolesRoleNameActionsPostResponse>(
    getAssignActionToRoleApiV1RolesRoleNameActionsPostUrl(roleName),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(roleActionRequest),
    }
  )
}

/**
 * Revoke a specific action permission from a role.

**Authorization**: Users can modify role permissions they have access to manage.
Permissions are checked via Cerbos policies.

**Action Removal**: Removes the specified action from the role's allowed permissions.

**Use Cases**:
- Revoke unnecessary permissions from roles
- Administrative role management
- Security incident response
- Policy tightening and least-privilege enforcement

**Policy Updates**: Changes are propagated to Cerbos policy engine for immediate effect.

**Note**: This endpoint manages role permissions through Cerbos policy configuration.
 * @summary Remove action permission from a role
 */
export type removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse204 =
  {
    data: null
    status: 204
  }

export type removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse422 =
  {
    data: HTTPValidationError
    status: 422
  }

export type removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponseComposite =
  | removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse204
  | removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse422

export type removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse =
  removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponseComposite & {
    headers: Headers
  }

export const getRemoveActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteUrl =
  (roleName: string, actionName: string) => {
    return `/api/v1/roles/${roleName}/actions/${actionName}`
  }

export const removeActionFromRoleApiV1RolesRoleNameActionsActionNameDelete =
  async (
    roleName: string,
    actionName: string,
    options?: RequestInit
  ): Promise<removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse> => {
    return customFetchHeimdall<removeActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteResponse>(
      getRemoveActionFromRoleApiV1RolesRoleNameActionsActionNameDeleteUrl(
        roleName,
        actionName
      ),
      {
        ...options,
        method: 'DELETE',
      }
    )
  }

/**
 * Delete a role from the system.

**Authorization**: Users can delete roles they have permission to manage.
Permissions are checked via Cerbos policies.

**Cascade Effects**:
- Removes the role from all groups that have it assigned
- Removes all action permissions associated with the role
- Updates Cerbos policies to reflect the role deletion

**Use Cases**:
- Remove obsolete or unused roles
- Administrative role cleanup
- Security compliance and role minimization
- System reorganization

**Safety**: Role deletion is irreversible. Ensure the role is no longer needed before deletion.
 * @summary Delete a role
 */
export type deleteRoleApiV1RolesRoleNameDeleteResponse204 = {
  data: null
  status: 204
}

export type deleteRoleApiV1RolesRoleNameDeleteResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type deleteRoleApiV1RolesRoleNameDeleteResponseComposite =
  | deleteRoleApiV1RolesRoleNameDeleteResponse204
  | deleteRoleApiV1RolesRoleNameDeleteResponse422

export type deleteRoleApiV1RolesRoleNameDeleteResponse =
  deleteRoleApiV1RolesRoleNameDeleteResponseComposite & {
    headers: Headers
  }

export const getDeleteRoleApiV1RolesRoleNameDeleteUrl = (roleName: string) => {
  return `/api/v1/roles/${roleName}`
}

export const deleteRoleApiV1RolesRoleNameDelete = async (
  roleName: string,
  options?: RequestInit
): Promise<deleteRoleApiV1RolesRoleNameDeleteResponse> => {
  return customFetchHeimdall<deleteRoleApiV1RolesRoleNameDeleteResponse>(
    getDeleteRoleApiV1RolesRoleNameDeleteUrl(roleName),
    {
      ...options,
      method: 'DELETE',
    }
  )
}
