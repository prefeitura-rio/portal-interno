/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Heimdall Admin Service
 * # Heimdall Admin Service API

A comprehensive admin service for user and group management with authorization powered by Cerbos.

## Features

- **User Management**: Automatic user creation from JWT tokens with role-based access control
- **Group Management**: Create, manage, and assign users to groups with hierarchical permissions
- **Role Management**: Define and assign roles to users and groups
- **Mapping Management**: Configure API endpoint to action mappings for authorization
- **Action Management**: Define available actions for fine-grained permission control
- **Cerbos Integration**: Policy-based authorization with external Cerbos service
- **Audit Logging**: Comprehensive audit trail for all administrative operations
- **Redis Caching**: High-performance caching for frequently accessed data
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddMemberRequest,
  GroupMemberResponse,
  HTTPValidationError,
  MembershipResponse,
} from '.././models'

import { customFetchHeimdall } from '../../../custom-fetch-heimdall'

/**
 * List all members of a specific group with their membership details.

**Authorization**: Users can view members of groups they have permission to access.
Permissions are checked via Cerbos policies.

**Member Information**: Returns each member's CPF, display name (if available),
join timestamp, and who added them to the group.

**Use Cases**:
- View team composition
- Audit group membership
- Administrative oversight
- Access control verification

**Sorting**: Members are returned sorted by join date (newest first).
 * @summary List group members
 */
export type listGroupMembersApiV1GroupsGroupNameMembersGetResponse200 = {
  data: GroupMemberResponse[]
  status: 200
}

export type listGroupMembersApiV1GroupsGroupNameMembersGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type listGroupMembersApiV1GroupsGroupNameMembersGetResponseComposite =
  | listGroupMembersApiV1GroupsGroupNameMembersGetResponse200
  | listGroupMembersApiV1GroupsGroupNameMembersGetResponse422

export type listGroupMembersApiV1GroupsGroupNameMembersGetResponse =
  listGroupMembersApiV1GroupsGroupNameMembersGetResponseComposite & {
    headers: Headers
  }

export const getListGroupMembersApiV1GroupsGroupNameMembersGetUrl = (
  groupName: string
) => {
  return `/api/v1/groups/${groupName}/members`
}

export const listGroupMembersApiV1GroupsGroupNameMembersGet = async (
  groupName: string,
  options?: RequestInit
): Promise<listGroupMembersApiV1GroupsGroupNameMembersGetResponse> => {
  return customFetchHeimdall<listGroupMembersApiV1GroupsGroupNameMembersGetResponse>(
    getListGroupMembersApiV1GroupsGroupNameMembersGetUrl(groupName),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Add a user to a group with automatic user creation and authorization checks.

**Authorization**: Users can add members to groups they have permission to manage.
Permissions are checked via Cerbos policies.

**Auto-Creation**: If the user being added doesn't exist in the system, they will
be automatically created with their CPF as the identifier.

**Member Identification**: Users are identified by their CPF (Brazilian tax ID),
which serves as the unique subject identifier.

**Use Cases**:
- Add team members to project groups
- Grant users access to specific resources
- Administrative user management
- Bulk user provisioning workflows

**Role Inheritance**: Users automatically inherit all roles assigned to groups
they're members of.
 * @summary Add member to group
 */
export type addMemberToGroupApiV1GroupsGroupNameMembersPostResponse200 = {
  data: MembershipResponse
  status: 200
}

export type addMemberToGroupApiV1GroupsGroupNameMembersPostResponseComposite =
  addMemberToGroupApiV1GroupsGroupNameMembersPostResponse200

export type addMemberToGroupApiV1GroupsGroupNameMembersPostResponse =
  addMemberToGroupApiV1GroupsGroupNameMembersPostResponseComposite & {
    headers: Headers
  }

export const getAddMemberToGroupApiV1GroupsGroupNameMembersPostUrl = (
  groupName: string
) => {
  return `/api/v1/groups/${groupName}/members`
}

export const addMemberToGroupApiV1GroupsGroupNameMembersPost = async (
  groupName: string,
  addMemberRequest: AddMemberRequest,
  options?: RequestInit
): Promise<addMemberToGroupApiV1GroupsGroupNameMembersPostResponse> => {
  return customFetchHeimdall<addMemberToGroupApiV1GroupsGroupNameMembersPostResponse>(
    getAddMemberToGroupApiV1GroupsGroupNameMembersPostUrl(groupName),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(addMemberRequest),
    }
  )
}

/**
 * Remove a user from a group, revoking their access to group-based permissions.

**Authorization**: Users can remove members from groups they have permission to manage.
Permissions are checked via Cerbos policies.

**Member Identification**: Users are identified by their CPF (Brazilian tax ID).

**Impact**: Removing a user from a group will revoke all roles and permissions
they inherited through that group membership.

**Use Cases**:
- Remove users who no longer need access
- Administrative user management
- Security incidents requiring immediate access revocation
- Team restructuring

**Cache Invalidation**: User role caches are automatically invalidated to ensure
immediate effect of permission changes.
 * @summary Remove member from group
 */
export type removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse204 =
  {
    data: null
    status: 204
  }

export type removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse422 =
  {
    data: HTTPValidationError
    status: 422
  }

export type removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponseComposite =
  | removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse204
  | removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse422

export type removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse =
  removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponseComposite & {
    headers: Headers
  }

export const getRemoveMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteUrl =
  (groupName: string, subject: string) => {
    return `/api/v1/groups/${groupName}/members/${subject}`
  }

export const removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDelete =
  async (
    groupName: string,
    subject: string,
    options?: RequestInit
  ): Promise<removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse> => {
    return customFetchHeimdall<removeMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteResponse>(
      getRemoveMemberFromGroupApiV1GroupsGroupNameMembersSubjectDeleteUrl(
        groupName,
        subject
      ),
      {
        ...options,
        method: 'DELETE',
      }
    )
  }
