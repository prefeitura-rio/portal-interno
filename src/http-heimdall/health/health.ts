/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Heimdall Admin Service
 * # Heimdall Admin Service API

A comprehensive admin service for user and group management with authorization powered by Cerbos.

## Features

- **User Management**: Automatic user creation from JWT tokens with role-based access control
- **Group Management**: Create, manage, and assign users to groups with hierarchical permissions
- **Role Management**: Define and assign roles to users and groups
- **Mapping Management**: Configure API endpoint to action mappings for authorization
- **Action Management**: Define available actions for fine-grained permission control
- **Cerbos Integration**: Policy-based authorization with external Cerbos service
- **Audit Logging**: Comprehensive audit trail for all administrative operations
- **Redis Caching**: High-performance caching for frequently accessed data
 * OpenAPI spec version: 1.0.0
 */
import type {
  HealthCheckApiV1HealthzGet200,
  ReadinessCheckApiV1ReadyzGet200,
} from '.././models'

import { customFetchHeimdall } from '../../../custom-fetch-heimdall'

/**
 * Basic health check endpoint that returns 200 if the service is running.
 * @summary Health check
 */
export type healthCheckApiV1HealthzGetResponse200 = {
  data: HealthCheckApiV1HealthzGet200
  status: 200
}

export type healthCheckApiV1HealthzGetResponseComposite =
  healthCheckApiV1HealthzGetResponse200

export type healthCheckApiV1HealthzGetResponse =
  healthCheckApiV1HealthzGetResponseComposite & {
    headers: Headers
  }

export const getHealthCheckApiV1HealthzGetUrl = () => {
  return `/api/v1/healthz`
}

export const healthCheckApiV1HealthzGet = async (
  options?: RequestInit
): Promise<healthCheckApiV1HealthzGetResponse> => {
  return customFetchHeimdall<healthCheckApiV1HealthzGetResponse>(
    getHealthCheckApiV1HealthzGetUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Comprehensive readiness check that verifies all system dependencies are available.

**Dependencies Checked**:
- Database connectivity
- Redis cache connectivity
- Cerbos authorization service connectivity

**Use Cases**:
- Kubernetes readiness probes
- Load balancer health checks
- Service mesh health verification
- Deployment validation
 * @summary Readiness check
 */
export type readinessCheckApiV1ReadyzGetResponse200 = {
  data: ReadinessCheckApiV1ReadyzGet200
  status: 200
}

export type readinessCheckApiV1ReadyzGetResponseComposite =
  readinessCheckApiV1ReadyzGetResponse200

export type readinessCheckApiV1ReadyzGetResponse =
  readinessCheckApiV1ReadyzGetResponseComposite & {
    headers: Headers
  }

export const getReadinessCheckApiV1ReadyzGetUrl = () => {
  return `/api/v1/readyz`
}

export const readinessCheckApiV1ReadyzGet = async (
  options?: RequestInit
): Promise<readinessCheckApiV1ReadyzGetResponse> => {
  return customFetchHeimdall<readinessCheckApiV1ReadyzGetResponse>(
    getReadinessCheckApiV1ReadyzGetUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Get the Cerbos policy template for granting superadmin permissions.

This endpoint provides the policy configuration that should be applied to Cerbos
when the admin API is disabled and manual policy configuration is required.

**Use Case**: When Heimdall cannot automatically create the superadmin policy
(e.g., Cerbos admin API is disabled), use this template to manually configure
the policy in your Cerbos deployment.

**Instructions**:
1. Get the policy template from this endpoint
2. Save it as a YAML or JSON file in your Cerbos configuration
3. Apply it via your Cerbos deployment method (ConfigMap, file system, etc.)
 * @summary Get Cerbos superadmin policy template
 */
export type getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponse200 = {
  data: unknown
  status: 200
}

export type getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponseComposite =
  getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponse200

export type getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponse =
  getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponseComposite & {
    headers: Headers
  }

export const getGetCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetUrl = () => {
  return `/api/v1/cerbos-policy-template`
}

export const getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGet = async (
  options?: RequestInit
): Promise<getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponse> => {
  return customFetchHeimdall<getCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetResponse>(
    getGetCerbosPolicyTemplateApiV1CerbosPolicyTemplateGetUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}
