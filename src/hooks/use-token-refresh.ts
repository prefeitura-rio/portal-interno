import { useCallback, useEffect, useRef } from 'react'

interface UseTokenRefreshOptions {
  /** Intervalo em minutos para verificar a expira√ß√£o do token (padr√£o: 0.25 minutos = 15 segundos) */
  checkInterval?: number
  /** Minutos antes da expira√ß√£o para fazer o refresh (padr√£o: 0.5 minutos = 30 segundos) */
  refreshBeforeExpiry?: number
}

interface UseTokenRefreshReturn {
  /** Iniciar o monitoramento do token */
  startTokenMonitoring: () => void
  /** Parar o monitoramento do token */
  stopTokenMonitoring: () => void
  /** Verificar se o monitoramento est√° ativo */
  isMonitoring: boolean
}

export function useTokenRefresh(
  options: UseTokenRefreshOptions = {}
): UseTokenRefreshReturn {
  const {
    checkInterval = 1, // 1 minuto
    refreshBeforeExpiry = 2, // Refresh 2 minutos antes da expira√ß√£o
  } = options

  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const isMonitoringRef = useRef(false)

  const getTokenExpiryTime = useCallback((token: string): number => {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]))
      return payload.exp * 1000 // Converter para milissegundos
    } catch (error) {
      console.error('‚ùå Erro ao obter tempo de expira√ß√£o do JWT:', error)
      return 0
    }
  }, [])

  const stopTokenMonitoring = useCallback(() => {
    if (!isMonitoringRef.current) {
      return
    }

    console.log('üõë Stopping automatic token monitoring')

    isMonitoringRef.current = false

    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }, [])

  const refreshToken = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üîÑ Refreshing access token...')

      const response = await fetch('/api/auth/refresh', {
        method: 'POST',
        credentials: 'include',
      })

      if (response.ok) {
        console.log('‚úÖ Access token refreshed successfully')
        return true
      }

      console.error('‚ùå Token refresh failed:', response.status)
      return false
    } catch (error) {
      console.error('‚ùå Error during token refresh:', error)
      return false
    }
  }, [])

  const checkAndRefreshToken = useCallback(async () => {
    try {
      // Verificar o status do token
      const tokenStatusResponse = await fetch('/api/auth/token-status', {
        credentials: 'include',
      })

      if (!tokenStatusResponse.ok) {
        console.log('üîç User not authenticated, stopping token monitoring')
        stopTokenMonitoring()
        return
      }

      const tokenData = await tokenStatusResponse.json()

      // Se n√£o temos token ou est√° expirado, tentar refresh
      if (!tokenData.token || tokenData.isExpired) {
        if (!tokenData.refreshToken) {
          console.log('‚ùå No refresh token available, redirecting to login...')
          window.location.href = '/api/auth/logout'
          return
        }

        console.log('üö® Token expired, attempting refresh...')
        const refreshSuccess = await refreshToken()

        if (!refreshSuccess) {
          console.error('‚ùå Refresh failed, redirecting to login...')
          window.location.href = '/api/auth/logout'
        }
        return
      }

      // Se temos token v√°lido, verificar se precisa de refresh
      const tokenExpiry = getTokenExpiryTime(tokenData.token)
      const now = Date.now()
      const timeUntilExpiry = tokenExpiry - now
      const minutesUntilExpiry = Math.round(timeUntilExpiry / 1000 / 60)

      // Se o token est√° pr√≥ximo da expira√ß√£o, fazer o refresh
      if (minutesUntilExpiry <= refreshBeforeExpiry && minutesUntilExpiry > 0) {
        console.log(
          `üö® Token expires in ${minutesUntilExpiry} minutes, refreshing...`
        )

        const refreshSuccess = await refreshToken()

        if (!refreshSuccess) {
          console.error('‚ùå Refresh failed, redirecting to login...')
          window.location.href = '/api/auth/logout'
        }
      }
    } catch (error) {
      console.error('‚ùå Error during token verification:', error)
      // Em caso de erro, parar o monitoramento para evitar loops
      stopTokenMonitoring()
    }
  }, [
    refreshBeforeExpiry,
    getTokenExpiryTime,
    refreshToken,
    stopTokenMonitoring,
  ])

  const startTokenMonitoring = useCallback(() => {
    if (isMonitoringRef.current) {
      return
    }

    console.log('üöÄ Starting automatic token monitoring')

    isMonitoringRef.current = true

    // Verifica√ß√£o imediata
    checkAndRefreshToken()

    // Configurar intervalo
    intervalRef.current = setInterval(
      checkAndRefreshToken,
      checkInterval * 60 * 1000 // Converter minutos para milissegundos
    )
  }, [checkInterval, checkAndRefreshToken])

  // Cleanup ao desmontar
  useEffect(() => {
    return () => {
      stopTokenMonitoring()
    }
  }, [stopTokenMonitoring])

  return {
    startTokenMonitoring,
    stopTokenMonitoring,
    isMonitoring: isMonitoringRef.current,
  }
}
